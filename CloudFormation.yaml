AWSTemplateFormatVersion: '2010-09-09'
Description: Create AWS and Infra

Parameters:
# ------------------------------------------------------------------#
# Parameter - myKeyPair
# ------------------------------------------------------------------#
  myKeyPair:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
# ------------------------------------------------------------------#
# Parameter - InstanceType
# ------------------------------------------------------------------#
  InstanceTypeParameter:
    Description: Enter t2.micro. Default is t2.micro.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
# ------------------------------------------------------------------#
# Parameter - InstanceAMI
# ------------------------------------------------------------------#
  EC2InstanceAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2



Resources:
# ------------------------------------------------------------------#
# VPC
# ------------------------------------------------------------------#
  cfnVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: false
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: aws-and-cfn-infra-vpc
# ------------------------------------------------------------------#
# Subnet
# ------------------------------------------------------------------#
  cfnPublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref cfnVPC
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-and-cfn-infra-public-subnet-1a
  cfnPublicSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref cfnVPC
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-and-cfn-infra-public-subnet-1c
  cfnPrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref cfnVPC
      CidrBlock: 10.0.20.0/24
      Tags:
        - Key: Name
          Value: aws-and-cfn-infra-private-subnet-1a
  cfnPrivateSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref cfnVPC
      CidrBlock: 10.0.21.0/24
      Tags:
        - Key: Name
          Value: aws-and-cfn-infra-private-subnet-1c
# ------------------------------------------------------------------#
# IGW
# ------------------------------------------------------------------#
  cfnIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: aws-and-cfn-infra-igw
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref cfnVPC
      InternetGatewayId: !Ref cfnIGW
# ------------------------------------------------------------------#
# RouteTable
# ------------------------------------------------------------------#
  cfnPublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref cfnVPC
      Tags:
        - Key: Name
          Value: aws-and-cfn-infra-public-route
# ------------------------------------------------------------------#
# Route - The Public Subnet to the IGW
# ------------------------------------------------------------------#
  cfnPublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref cfnPublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref cfnIGW
# ------------------------------------------------------------------#
# SubnetRouteTableAssociation - PublicSubnetRouteTable
# ------------------------------------------------------------------#
  cfnPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref cfnPublicSubnet1a
      RouteTableId: !Ref cfnPublicSubnetRouteTable
# ------------------------------------------------------------------#
# SecurityGroup - Web (Public 1a)
# ------------------------------------------------------------------#
  cfnSecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: aws-and-cfn-infra-web-sg
      GroupDescription: aws-and-cfn-infra-web-sg
      VpcId: !Ref cfnVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: aws-and-infra-web
# ------------------------------------------------------------------#
# SecurityGroup - RDS (Private 1a)
# ------------------------------------------------------------------#
  cfnSecurityGroupDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: aws-and-cfn-infra-db-sg
      GroupDescription: aws-and-cfn-infra-db-sg
      VpcId: !Ref cfnVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref cfnSecurityGroupWeb
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: aws-and-infra-db
# ------------------------------------------------------------------#
# SecurityGroup - ALB (Public 1a,1c)
# ------------------------------------------------------------------#
  cfnSecurityGroupALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: aws-and-cfn-infra-alb-sg
      GroupDescription: aws-and-cfn-infra-alb-sg
      VpcId: !Ref cfnVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: aws-and-cfn-infra-alb-sg
# ------------------------------------------------------------------#
# EC2 Instance
# ------------------------------------------------------------------#
  cfnEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref myKeyPair
      ImageId: !Ref EC2InstanceAMI
      InstanceType: !Ref InstanceTypeParameter
      Tags:
        - Key: Name
          Value: aws-and-cfn-infra-web
      SubnetId: !Ref cfnPublicSubnet1a
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 8
            DeleteOnTermination: true
      SecurityGroupIds:
        - !Ref cfnSecurityGroupWeb
      Monitoring: false
      PrivateIpAddress: 10.0.10.10
# ------------------------------------------------------------------#
# RDS Instance
# ------------------------------------------------------------------#
  cfnRdsDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      AvailabilityZone: !GetAtt cfnPrivateSubnet1a.AvailabilityZone
      BackupRetentionPeriod: 1 #Default:1(/day)„ÄÅset:0 "No BackUP!"
      PreferredBackupWindow: 15:00-16:00
      PreferredMaintenanceWindow: sun:18:00-sun:19:00
      DBInstanceIdentifier: aws-and-cfn-mysql
      DBName: TimeLine #Reference for Mr Enami's sorce code
      LicenseModel: general-public-license
      DBParameterGroupName: !Ref cfnRdsDBParameterGroup
      OptionGroupName: !Ref cfnRdsOptionGroup
      MonitoringInterval: 0
      DBSubnetGroupName: !Ref cfnDBSubnetGroup
      Engine: mysql
      EngineVersion: 8.0.15
      MasterUsername: root
      MasterUserPassword: password
      MultiAZ: false
      Port: 3306
      PubliclyAccessible: false
      DeletionProtection: false
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref cfnSecurityGroupDB
      Tags:
        - Key: Name
          Value: aws-and-cfn-mysql
    DeletionPolicy: Delete
# ------------------------------------------------------------------#
# RDS - DBSubnetGroup
# ------------------------------------------------------------------#
  cfnDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: aws-and-cfn-db-subnetg
      DBSubnetGroupDescription: aws-and-cfn-db-subnetg
      SubnetIds:
        - !Ref cfnPrivateSubnet1a
        - !Ref cfnPrivateSubnet1c
# ------------------------------------------------------------------#
# RDS - DBParameterGroup
# ------------------------------------------------------------------#
  cfnRdsDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: aws-and-infra-mysql80
      Family: mysql8.0
# ------------------------------------------------------------------#
# RDS - OptionGroup
# ------------------------------------------------------------------#
  cfnRdsOptionGroup:
    Type: AWS::RDS::OptionGroup
    Properties:
      EngineName: mysql
      MajorEngineVersion: 8.0
      OptionGroupDescription: aws-and-infra-option-mysql80
# ------------------------------------------------------------------#
# ALB - ApplicationLoadBalancer
# ------------------------------------------------------------------#
  cfnALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: aws-and-infra-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref cfnSecurityGroupALB
      Subnets:
        - !Ref cfnPublicSubnet1a
        - !Ref cfnPublicSubnet1c
      Type: application
      Tags:
        - Key: Name
          Value: aws-and-infra-alb
# ------------------------------------------------------------------#
# ALB - Listener
# ------------------------------------------------------------------#
  cfnListner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - TargetGroupArn: !Ref cfnTargetGroup
          Type: forward
      LoadBalancerArn: !Ref cfnALB
      Port: 80
      Protocol: HTTP
# ------------------------------------------------------------------#
# ALB - TargetGroup
# ------------------------------------------------------------------#
  cfnTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      Matcher:
        HttpCode: 200,300
      Tags:
        - Key: Name
          Value: aws-and-infra-cfn-web-tg
      Name: aws-and-infra-cfn-web-tg
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref cfnEC2Instance
          Port: 80
      VpcId: !Ref cfnVPC